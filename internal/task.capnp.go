// Code generated by capnpc-go. DO NOT EDIT.

package internal

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	stream "capnproto.org/go/capnp/v3/std/capnp/stream"
	context "context"
)

type TaskMessage capnp.Struct

// TaskMessage_TypeID is the unique identifier for the type TaskMessage.
const TaskMessage_TypeID = 0xcc1d3ff79ea047c6

func NewTaskMessage(s *capnp.Segment) (TaskMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TaskMessage(st), err
}

func NewRootTaskMessage(s *capnp.Segment) (TaskMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TaskMessage(st), err
}

func ReadRootTaskMessage(msg *capnp.Message) (TaskMessage, error) {
	root, err := msg.Root()
	return TaskMessage(root.Struct()), err
}

func (s TaskMessage) String() string {
	str, _ := text.Marshal(0xcc1d3ff79ea047c6, capnp.Struct(s))
	return str
}

func (s TaskMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TaskMessage) DecodeFromPtr(p capnp.Ptr) TaskMessage {
	return TaskMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TaskMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TaskMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TaskMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TaskMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TaskMessage) Tid() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s TaskMessage) SetTid(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s TaskMessage) Ttype() uint8 {
	return capnp.Struct(s).Uint8(4)
}

func (s TaskMessage) SetTtype(v uint8) {
	capnp.Struct(s).SetUint8(4, v)
}

func (s TaskMessage) Tvalue() uint8 {
	return capnp.Struct(s).Uint8(5)
}

func (s TaskMessage) SetTvalue(v uint8) {
	capnp.Struct(s).SetUint8(5, v)
}

// TaskMessage_List is a list of TaskMessage.
type TaskMessage_List = capnp.StructList[TaskMessage]

// NewTaskMessage creates a new list of TaskMessage.
func NewTaskMessage_List(s *capnp.Segment, sz int32) (TaskMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[TaskMessage](l), err
}

// TaskMessage_Future is a wrapper for a TaskMessage promised by a client call.
type TaskMessage_Future struct{ *capnp.Future }

func (f TaskMessage_Future) Struct() (TaskMessage, error) {
	p, err := f.Future.Ptr()
	return TaskMessage(p.Struct()), err
}

type ByteStream capnp.Client

// ByteStream_TypeID is the unique identifier for the type ByteStream.
const ByteStream_TypeID = 0xeee98b583275035b

func (c ByteStream) StreamTask(ctx context.Context, params func(ByteStream_streamTask_Params) error) error {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xeee98b583275035b,
			MethodID:      0,
			InterfaceName: "internal/task.capnp:ByteStream",
			MethodName:    "streamTask",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ByteStream_streamTask_Params(s)) }
	}

	return capnp.Client(c).SendStreamCall(ctx, s)

}

func (c ByteStream) Done(ctx context.Context, params func(ByteStream_done_Params) error) (ByteStream_done_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xeee98b583275035b,
			MethodID:      1,
			InterfaceName: "internal/task.capnp:ByteStream",
			MethodName:    "done",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ByteStream_done_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ByteStream_done_Results_Future{Future: ans.Future()}, release

}

func (c ByteStream) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c ByteStream) String() string {
	return "ByteStream(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c ByteStream) AddRef() ByteStream {
	return ByteStream(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c ByteStream) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c ByteStream) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c ByteStream) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ByteStream) DecodeFromPtr(p capnp.Ptr) ByteStream {
	return ByteStream(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c ByteStream) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c ByteStream) IsSame(other ByteStream) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c ByteStream) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c ByteStream) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A ByteStream_Server is a ByteStream with a local implementation.
type ByteStream_Server interface {
	StreamTask(context.Context, ByteStream_streamTask) error

	Done(context.Context, ByteStream_done) error
}

// ByteStream_NewServer creates a new Server from an implementation of ByteStream_Server.
func ByteStream_NewServer(s ByteStream_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ByteStream_Methods(nil, s), s, c)
}

// ByteStream_ServerToClient creates a new Client from an implementation of ByteStream_Server.
// The caller is responsible for calling Release on the returned Client.
func ByteStream_ServerToClient(s ByteStream_Server) ByteStream {
	return ByteStream(capnp.NewClient(ByteStream_NewServer(s)))
}

// ByteStream_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ByteStream_Methods(methods []server.Method, s ByteStream_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xeee98b583275035b,
			MethodID:      0,
			InterfaceName: "internal/task.capnp:ByteStream",
			MethodName:    "streamTask",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.StreamTask(ctx, ByteStream_streamTask{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xeee98b583275035b,
			MethodID:      1,
			InterfaceName: "internal/task.capnp:ByteStream",
			MethodName:    "done",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Done(ctx, ByteStream_done{call})
		},
	})

	return methods
}

// ByteStream_streamTask holds the state for a server call to ByteStream.streamTask.
// See server.Call for documentation.
type ByteStream_streamTask struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ByteStream_streamTask) Args() ByteStream_streamTask_Params {
	return ByteStream_streamTask_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ByteStream_streamTask) AllocResults() (stream.StreamResult, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return stream.StreamResult(r), err
}

// ByteStream_done holds the state for a server call to ByteStream.done.
// See server.Call for documentation.
type ByteStream_done struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ByteStream_done) Args() ByteStream_done_Params {
	return ByteStream_done_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ByteStream_done) AllocResults() (ByteStream_done_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_done_Results(r), err
}

// ByteStream_List is a list of ByteStream.
type ByteStream_List = capnp.CapList[ByteStream]

// NewByteStream_List creates a new list of ByteStream.
func NewByteStream_List(s *capnp.Segment, sz int32) (ByteStream_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ByteStream](l), err
}

type ByteStream_streamTask_Params capnp.Struct

// ByteStream_streamTask_Params_TypeID is the unique identifier for the type ByteStream_streamTask_Params.
const ByteStream_streamTask_Params_TypeID = 0xbcd69241b2c9d2c7

func NewByteStream_streamTask_Params(s *capnp.Segment) (ByteStream_streamTask_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ByteStream_streamTask_Params(st), err
}

func NewRootByteStream_streamTask_Params(s *capnp.Segment) (ByteStream_streamTask_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ByteStream_streamTask_Params(st), err
}

func ReadRootByteStream_streamTask_Params(msg *capnp.Message) (ByteStream_streamTask_Params, error) {
	root, err := msg.Root()
	return ByteStream_streamTask_Params(root.Struct()), err
}

func (s ByteStream_streamTask_Params) String() string {
	str, _ := text.Marshal(0xbcd69241b2c9d2c7, capnp.Struct(s))
	return str
}

func (s ByteStream_streamTask_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ByteStream_streamTask_Params) DecodeFromPtr(p capnp.Ptr) ByteStream_streamTask_Params {
	return ByteStream_streamTask_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ByteStream_streamTask_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ByteStream_streamTask_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ByteStream_streamTask_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ByteStream_streamTask_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ByteStream_streamTask_Params) Task() (TaskMessage, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return TaskMessage(p.Struct()), err
}

func (s ByteStream_streamTask_Params) HasTask() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ByteStream_streamTask_Params) SetTask(v TaskMessage) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTask sets the task field to a newly
// allocated TaskMessage struct, preferring placement in s's segment.
func (s ByteStream_streamTask_Params) NewTask() (TaskMessage, error) {
	ss, err := NewTaskMessage(capnp.Struct(s).Segment())
	if err != nil {
		return TaskMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ByteStream_streamTask_Params_List is a list of ByteStream_streamTask_Params.
type ByteStream_streamTask_Params_List = capnp.StructList[ByteStream_streamTask_Params]

// NewByteStream_streamTask_Params creates a new list of ByteStream_streamTask_Params.
func NewByteStream_streamTask_Params_List(s *capnp.Segment, sz int32) (ByteStream_streamTask_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ByteStream_streamTask_Params](l), err
}

// ByteStream_streamTask_Params_Future is a wrapper for a ByteStream_streamTask_Params promised by a client call.
type ByteStream_streamTask_Params_Future struct{ *capnp.Future }

func (f ByteStream_streamTask_Params_Future) Struct() (ByteStream_streamTask_Params, error) {
	p, err := f.Future.Ptr()
	return ByteStream_streamTask_Params(p.Struct()), err
}
func (p ByteStream_streamTask_Params_Future) Task() TaskMessage_Future {
	return TaskMessage_Future{Future: p.Future.Field(0, nil)}
}

type ByteStream_done_Params capnp.Struct

// ByteStream_done_Params_TypeID is the unique identifier for the type ByteStream_done_Params.
const ByteStream_done_Params_TypeID = 0xe9a872bffed42f0f

func NewByteStream_done_Params(s *capnp.Segment) (ByteStream_done_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_done_Params(st), err
}

func NewRootByteStream_done_Params(s *capnp.Segment) (ByteStream_done_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_done_Params(st), err
}

func ReadRootByteStream_done_Params(msg *capnp.Message) (ByteStream_done_Params, error) {
	root, err := msg.Root()
	return ByteStream_done_Params(root.Struct()), err
}

func (s ByteStream_done_Params) String() string {
	str, _ := text.Marshal(0xe9a872bffed42f0f, capnp.Struct(s))
	return str
}

func (s ByteStream_done_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ByteStream_done_Params) DecodeFromPtr(p capnp.Ptr) ByteStream_done_Params {
	return ByteStream_done_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ByteStream_done_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ByteStream_done_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ByteStream_done_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ByteStream_done_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ByteStream_done_Params_List is a list of ByteStream_done_Params.
type ByteStream_done_Params_List = capnp.StructList[ByteStream_done_Params]

// NewByteStream_done_Params creates a new list of ByteStream_done_Params.
func NewByteStream_done_Params_List(s *capnp.Segment, sz int32) (ByteStream_done_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ByteStream_done_Params](l), err
}

// ByteStream_done_Params_Future is a wrapper for a ByteStream_done_Params promised by a client call.
type ByteStream_done_Params_Future struct{ *capnp.Future }

func (f ByteStream_done_Params_Future) Struct() (ByteStream_done_Params, error) {
	p, err := f.Future.Ptr()
	return ByteStream_done_Params(p.Struct()), err
}

type ByteStream_done_Results capnp.Struct

// ByteStream_done_Results_TypeID is the unique identifier for the type ByteStream_done_Results.
const ByteStream_done_Results_TypeID = 0xa630970c275b7400

func NewByteStream_done_Results(s *capnp.Segment) (ByteStream_done_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_done_Results(st), err
}

func NewRootByteStream_done_Results(s *capnp.Segment) (ByteStream_done_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_done_Results(st), err
}

func ReadRootByteStream_done_Results(msg *capnp.Message) (ByteStream_done_Results, error) {
	root, err := msg.Root()
	return ByteStream_done_Results(root.Struct()), err
}

func (s ByteStream_done_Results) String() string {
	str, _ := text.Marshal(0xa630970c275b7400, capnp.Struct(s))
	return str
}

func (s ByteStream_done_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ByteStream_done_Results) DecodeFromPtr(p capnp.Ptr) ByteStream_done_Results {
	return ByteStream_done_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ByteStream_done_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ByteStream_done_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ByteStream_done_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ByteStream_done_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ByteStream_done_Results_List is a list of ByteStream_done_Results.
type ByteStream_done_Results_List = capnp.StructList[ByteStream_done_Results]

// NewByteStream_done_Results creates a new list of ByteStream_done_Results.
func NewByteStream_done_Results_List(s *capnp.Segment, sz int32) (ByteStream_done_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ByteStream_done_Results](l), err
}

// ByteStream_done_Results_Future is a wrapper for a ByteStream_done_Results promised by a client call.
type ByteStream_done_Results_Future struct{ *capnp.Future }

func (f ByteStream_done_Results_Future) Struct() (ByteStream_done_Results, error) {
	p, err := f.Future.Ptr()
	return ByteStream_done_Results(p.Struct()), err
}

const schema_a9012778dd18b453 = "x\xda\x8c\x92?h\x14A\x14\xc6\xbf\xef\xcd\xee\xed\x15" +
	"\x09\x97a\xb7\xb0\x09A\x89\x84\xa4\xc8_\xab4w\x11" +
	"E\x03\x1e\xdc\x98\x14!)d5\x8b\x84\xbb[\x8f\x9b" +
	"95\x95\xa5\xa0\x9d\x8dh!V\xa2\x95(\x96\x82V" +
	"\x8a\xa0\x8d\xa8`aa\x99\xc6V\xb0\xc8\xca^\xc8\xae" +
	"\x08\x82\xd50\xf3>~\xdf\xbc\xef\xbd\xf9\x80\x0doa" +
	"\xf4\x86\x071'\xfc\xca\xbe\xdb\x9a\x1a\xb9;\xffHO" +
	"\x10\xf0\x02`\xe9\xb8\\$\xbc\xec\xed\xc7w\xcfW\xee" +
	"|y\x89a\xc5g^\xd2r\x8b`xT\xea`\xf6" +
	"\xe6\xcc\xc3\x07?\xeb\xe3\xefa\"2[{q\xe4\xdb" +
	"\xf5)>9`\xac\x880lJ\x00\x84\xab\xf2\x14\xcc" +
	"js\x9f\xf6_\xf5\x1f\xef\xa1\xf4\xf9.\x9b\xb9\xcf\x96" +
	"\x1a,n\xdc\xde\xfb\x01\x1d\xa9\x92\x02\x86\x1f\xe4W\xf8" +
	"u\x88\xf8,7\xc3i\x15`#\xdbI]\xd2O\xe3" +
	"\x8e7\xe7b\xdb\x9e\xbd\x14\xf7\xd2\xde\xf2\xc9]\x97\xac" +
	"\xb9~\x12wg\xb7\xaf\xa4\xc9\xe4\xf9\xc4\x0e\x82\x8e\xb3" +
	"\x85\xda\xff\x87\xda\x0e\x8f\xf5\xd8\xb6'[q?\xeeZ" +
	"\xc0x\xca\x03<\x02zt\x060UE\x13\x09k9" +
	"\x80ce\xcf \xc7\xc0\xc2A\xfd\xe9\x90\x03\x9b\x89\xb5" +
	"\xf1\xe5\x04-\xd2\x8c\x14\xc8\xd3\xc7\x00\xd3P4\xe7\x84" +
	"\x9a^\xc4\xfcqu\x110\xa7\x14MK\xa8\xc5\x8f(" +
	"\x80n.\x03\xe6\xac\xa2Y\x17\x06ng\x9bU\x08\xab" +
	"\xe0\x84s\xbb\xbd\x84\x15\x08+`\xdd]\x8d;\x83\xe2" +
	"\xfa\x7f\xf1\xe4\xad\xaan\x99\x8e\xfc-\xae\x1f\xa8\xf3\xaf" +
	"W\x95\x0f\x14\xab\xc0\xf4\xd9\xebkK\xf7/\xdc\xd3\x0b" +
	"\x9b\x10=\x1d\xb0\x1c,q\xb8H\xe33\x10\xad\x83\xec" +
	"0](\xdbn\xb0\x96{7\xd8\"\x7f\x07\x00\x00\xff" +
	"\xff\xeaw\xb2\x9a"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_a9012778dd18b453,
		Nodes: []uint64{
			0xa630970c275b7400,
			0xbcd69241b2c9d2c7,
			0xcc1d3ff79ea047c6,
			0xe9a872bffed42f0f,
			0xeee98b583275035b,
		},
		Compressed: true,
	})
}
