// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package internal

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one
INSERT INTO TASK_T (
    ID, TYPE, VALUE, STATE, CREATION_TIME, LAST_UPDATE_TIME
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, type, value, state, creation_time, last_update_time
`

type CreateTaskParams struct {
	ID             int32
	Type           int16
	Value          int16
	State          string
	CreationTime   pgtype.Timestamp
	LastUpdateTime pgtype.Timestamp
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (TaskT, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.ID,
		arg.Type,
		arg.Value,
		arg.State,
		arg.CreationTime,
		arg.LastUpdateTime,
	)
	var i TaskT
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Value,
		&i.State,
		&i.CreationTime,
		&i.LastUpdateTime,
	)
	return i, err
}

const getMaxTaskID = `-- name: GetMaxTaskID :one
SELECT MAX(ID) FROM TASK_T
LIMIT 1
`

func (q *Queries) GetMaxTaskID(ctx context.Context) (interface{}, error) {
	row := q.db.QueryRow(ctx, getMaxTaskID)
	var max interface{}
	err := row.Scan(&max)
	return max, err
}

const getTaskValue = `-- name: GetTaskValue :one
SELECT ID, value FROM TASK_T
WHERE ID = $1 LIMIT 1
`

type GetTaskValueRow struct {
	ID    int32
	Value int16
}

func (q *Queries) GetTaskValue(ctx context.Context, id int32) (GetTaskValueRow, error) {
	row := q.db.QueryRow(ctx, getTaskValue, id)
	var i GetTaskValueRow
	err := row.Scan(&i.ID, &i.Value)
	return i, err
}

const updateTaskState = `-- name: UpdateTaskState :one
UPDATE TASK_T
    SET
    STATE = $2,
    LAST_UPDATE_TIME = $3
WHERE ID = $1
RETURNING id, type, value, state, creation_time, last_update_time
`

type UpdateTaskStateParams struct {
	ID             int32
	State          string
	LastUpdateTime pgtype.Timestamp
}

func (q *Queries) UpdateTaskState(ctx context.Context, arg UpdateTaskStateParams) (TaskT, error) {
	row := q.db.QueryRow(ctx, updateTaskState, arg.ID, arg.State, arg.LastUpdateTime)
	var i TaskT
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Value,
		&i.State,
		&i.CreationTime,
		&i.LastUpdateTime,
	)
	return i, err
}
